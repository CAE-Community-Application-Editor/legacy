package i5.las2peer.services.achievementResource;

import java.net.HttpURLConnection;

import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;

import com.fasterxml.jackson.core.JsonProcessingException;

import i5.las2peer.api.Service;
import i5.las2peer.restMapper.HttpResponse;
import i5.las2peer.restMapper.MediaType;
import i5.las2peer.restMapper.RESTMapper;
import i5.las2peer.restMapper.annotations.ContentParam;
import i5.las2peer.restMapper.annotations.Version;
import i5.las2peer.services.achievementResource.database.DatabaseManager;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Contact;
import io.swagger.annotations.Info;
import io.swagger.annotations.License;
import io.swagger.annotations.SwaggerDefinition;
import io.swagger.jaxrs.Reader;
import io.swagger.models.Swagger;
import io.swagger.util.Json;
import net.minidev.json.JSONObject;
import net.minidev.json.JSONValue;


/**
 * 
 * UGNM1516G2 backend achievement
 * 
 * This microservice was generated by the CAE (Community Application Editor). If you edit it, please
 * make sure to keep the general structure of the file and only add the body of the methods provided
 * in this main file. Private methods are also allowed, but any "deeper" functionality should be
 * outsourced to (imported) classes.
 * 
 */
@Path("achievements")
@Version("0.3") // this annotation is used by the XML mapper
@Api
@SwaggerDefinition(
    info = @Info(title = "UGNM1516G2 backend achievement", version = "0.3",
        description = "A LAS2peer microservice generated by the CAE.",
        termsOfService = "none",
        contact = @Contact(name = "sebastian vaassen", email = "CAEAddress@gmail.com") ,
        license = @License(name = "BSD",
            url = "https://github.com/CAE-Community-Application-Editor/microservice-UGNM1516G2-backend-achievement/blob/master/LICENSE.txt") ) )
public class achievementResource extends Service {


  /*
   * Database configuration
   */
  private String jdbcDriverClassName;
  private String jdbcLogin;
  private String jdbcPass;
  private String jdbcUrl;
  private String jdbcSchema;
  private DatabaseManager dbm;


  public achievementResource() {
    // read and set properties values
    setFieldValues();
    // instantiate a database manager to handle database connection pooling and credentials
    dbm = new DatabaseManager(jdbcDriverClassName, jdbcLogin, jdbcPass, jdbcUrl, jdbcSchema);
  }

  // //////////////////////////////////////////////////////////////////////////////////////
  // Service methods.
  // //////////////////////////////////////////////////////////////////////////////////////


  /**
   * 
   * createAchievement
   * 
   * @param appid a String
   * @param data a JSONObject
   * 
   * @return HttpResponse
   * 
   */
  @POST
  @Path("/app/{appid}/all")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.APPLICATION_JSON)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_UNAUTHORIZED, message = "unauthorizedResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "intErrorResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_CREATED, message = "createdResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_NOT_FOUND, message = "notFoundResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_BAD_REQUEST, message = "badRequestResponse")
  })
  @ApiOperation(value = "createAchievement", notes = "")
  public HttpResponse createAchievement(@PathParam("appid") String appid, @ContentParam String data) {
    JSONObject data_JSON = (JSONObject) JSONValue.parse(data);
    // unauthorizedResponse
    boolean unauthorizedResponse_condition = true;
    if(unauthorizedResponse_condition) {
      String unauthorized = "Some String";
      HttpResponse unauthorizedResponse = new HttpResponse(unauthorized, HttpURLConnection.HTTP_UNAUTHORIZED);
      return unauthorizedResponse;
    }
    // intErrorResponse
    boolean intErrorResponse_condition = true;
    if(intErrorResponse_condition) {
      String intError = "Some String";
      HttpResponse intErrorResponse = new HttpResponse(intError, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return intErrorResponse;
    }
    // createdResponse
    boolean createdResponse_condition = true;
    if(createdResponse_condition) {
      JSONObject createdData = new JSONObject();
      HttpResponse createdResponse = new HttpResponse(createdData.toJSONString(), HttpURLConnection.HTTP_CREATED);
      return createdResponse;
    }
    // notFoundResponse
    boolean notFoundResponse_condition = true;
    if(notFoundResponse_condition) {
      String notFound = "Some String";
      HttpResponse notFoundResponse = new HttpResponse(notFound, HttpURLConnection.HTTP_NOT_FOUND);
      return notFoundResponse;
    }
    // badRequestResponse
    boolean badRequestResponse_condition = true;
    if(badRequestResponse_condition) {
      String badRequest = "Some String";
      HttpResponse badRequestResponse = new HttpResponse(badRequest, HttpURLConnection.HTTP_BAD_REQUEST);
      return badRequestResponse;
    }
    return null;
  }


  /**
   * 
   * getWins
   * 
   * @param userid a String
   * @param appid a String
   * 
   * @return HttpResponse
   * 
   */
  @GET
  @Path("/app/{appid}/user/{userid}/all")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.TEXT_PLAIN)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_NOT_FOUND, message = "notFoundResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "okResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "intErrorResponse")
  })
  @ApiOperation(value = "getWins", notes = "")
  public HttpResponse getWins(@PathParam("userid") String userid, @PathParam("appid") String appid) {
    // notFoundResponse
    boolean notFoundResponse_condition = true;
    if(notFoundResponse_condition) {
      String notFound = "Some String";
      HttpResponse notFoundResponse = new HttpResponse(notFound, HttpURLConnection.HTTP_NOT_FOUND);
      return notFoundResponse;
    }
    // okResponse
    boolean okResponse_condition = true;
    if(okResponse_condition) {
      JSONObject list = new JSONObject();
      HttpResponse okResponse = new HttpResponse(list.toJSONString(), HttpURLConnection.HTTP_OK);
      return okResponse;
    }
    // intErrorResponse
    boolean intErrorResponse_condition = true;
    if(intErrorResponse_condition) {
      String intError = "Some String";
      HttpResponse intErrorResponse = new HttpResponse(intError, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return intErrorResponse;
    }
    return null;
  }


  /**
   * 
   * getAllAchievementsByApp
   * 
   * @param  a String
   * 
   * @return HttpResponse
   * 
   */
  @GET
  @Path("/app/{appid}/all")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.TEXT_PLAIN)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "intErrorResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_NOT_FOUND, message = "notFoundResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "okResponse")
  })
  @ApiOperation(value = "getAllAchievementsByApp", notes = "")
  public HttpResponse getAllAchievementsByApp(@PathParam("") String ) {
    // intErrorResponse
    boolean intErrorResponse_condition = true;
    if(intErrorResponse_condition) {
      String intError = "Some String";
      HttpResponse intErrorResponse = new HttpResponse(.toJSONString()intError, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return intErrorResponse;
    }
    // notFoundResponse
    boolean notFoundResponse_condition = true;
    if(notFoundResponse_condition) {
      String notFound = "Some String";
      HttpResponse notFoundResponse = new HttpResponse(.toJSONString()notFound, HttpURLConnection.HTTP_NOT_FOUND);
      return notFoundResponse;
    }
    // okResponse
    boolean okResponse_condition = true;
    if(okResponse_condition) {
      JSONObject  = new JSONObject();
      HttpResponse okResponse = new HttpResponse(.toJSONString(), HttpURLConnection.HTTP_OK);
      return okResponse;
    }
    return null;
  }


  /**
   * 
   * updateAchievement
   * 
   * @param id a String
   * @param newData a JSONObject
   * 
   * @return HttpResponse
   * 
   */
  @PUT
  @Path("/{id}")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.APPLICATION_JSON)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_BAD_REQUEST, message = "badRequestResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "updatedResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "intErrorResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_UNAUTHORIZED, message = "unauthorizedResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_NOT_FOUND, message = "notFoundResponse")
  })
  @ApiOperation(value = "updateAchievement", notes = "")
  public HttpResponse updateAchievement(@PathParam("id") String id, @ContentParam String newData) {
    JSONObject newData_JSON = (JSONObject) JSONValue.parse(newData);
    // badRequestResponse
    boolean badRequestResponse_condition = true;
    if(badRequestResponse_condition) {
      String badRequest = "Some String";
      HttpResponse badRequestResponse = new HttpResponse(badRequest, HttpURLConnection.HTTP_BAD_REQUEST);
      return badRequestResponse;
    }
    // updatedResponse
    boolean updatedResponse_condition = true;
    if(updatedResponse_condition) {
      JSONObject updatedData = new JSONObject();
      HttpResponse updatedResponse = new HttpResponse(updatedData.toJSONString(), HttpURLConnection.HTTP_OK);
      return updatedResponse;
    }
    // intErrorResponse
    boolean intErrorResponse_condition = true;
    if(intErrorResponse_condition) {
      String intError = "Some String";
      HttpResponse intErrorResponse = new HttpResponse(intError, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return intErrorResponse;
    }
    // unauthorizedResponse
    boolean unauthorizedResponse_condition = true;
    if(unauthorizedResponse_condition) {
      String unauthorized = "Some String";
      HttpResponse unauthorizedResponse = new HttpResponse(unauthorized, HttpURLConnection.HTTP_UNAUTHORIZED);
      return unauthorizedResponse;
    }
    // notFoundResponse
    boolean notFoundResponse_condition = true;
    if(notFoundResponse_condition) {
      String notFound = "Some String";
      HttpResponse notFoundResponse = new HttpResponse(notFound, HttpURLConnection.HTTP_NOT_FOUND);
      return notFoundResponse;
    }
    return null;
  }


  /**
   * 
   * getAllNotAchieved
   * 
   * @param appid a String
   * @param userid a String
   * 
   * @return HttpResponse
   * 
   */
  @GET
  @Path("/app/{appid}/notachieved/{userid}")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.TEXT_PLAIN)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "okResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_NOT_FOUND, message = "notFoundResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "intErrorResponse")
  })
  @ApiOperation(value = "getAllNotAchieved", notes = "")
  public HttpResponse getAllNotAchieved(@PathParam("appid") String appid, @PathParam("userid") String userid) {
    // okResponse
    boolean okResponse_condition = true;
    if(okResponse_condition) {
      JSONObject list = new JSONObject();
      HttpResponse okResponse = new HttpResponse(list.toJSONString(), HttpURLConnection.HTTP_OK);
      return okResponse;
    }
    // notFoundResponse
    boolean notFoundResponse_condition = true;
    if(notFoundResponse_condition) {
      String notFound = "Some String";
      HttpResponse notFoundResponse = new HttpResponse(notFound, HttpURLConnection.HTTP_NOT_FOUND);
      return notFoundResponse;
    }
    // intErrorResponse
    boolean intErrorResponse_condition = true;
    if(intErrorResponse_condition) {
      String intError = "Some String";
      HttpResponse intErrorResponse = new HttpResponse(intError, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return intErrorResponse;
    }
    return null;
  }


  /**
   * 
   * addWin
   * 
   * @param userid a JSONObject
   * @param appid a String
   * 
   * @return HttpResponse
   * 
   */
  @POST
  @Path("/app/{appid}/user/{userid}/all")
  @Produces(MediaType.TEXT_PLAIN)
  @Consumes(MediaType.APPLICATION_JSON)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_UNAUTHORIZED, message = "unauthorizedResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_NOT_FOUND, message = "notFoundResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "intErrorResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_CREATED, message = "createdResponse")
  })
  @ApiOperation(value = "addWin", notes = "")
  public HttpResponse addWin(@ContentParam String userid, @PathParam("appid") String appid) {
    JSONObject userid_JSON = (JSONObject) JSONValue.parse(userid);
    // unauthorizedResponse
    boolean unauthorizedResponse_condition = true;
    if(unauthorizedResponse_condition) {
      String unauthorized = "Some String";
      HttpResponse unauthorizedResponse = new HttpResponse(unauthorized, HttpURLConnection.HTTP_UNAUTHORIZED);
      return unauthorizedResponse;
    }
    // notFoundResponse
    boolean notFoundResponse_condition = true;
    if(notFoundResponse_condition) {
      String notFound = "Some String";
      HttpResponse notFoundResponse = new HttpResponse(notFound, HttpURLConnection.HTTP_NOT_FOUND);
      return notFoundResponse;
    }
    // intErrorResponse
    boolean intErrorResponse_condition = true;
    if(intErrorResponse_condition) {
      String intError = "Some String";
      HttpResponse intErrorResponse = new HttpResponse(intError, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return intErrorResponse;
    }
    // createdResponse
    boolean createdResponse_condition = true;
    if(createdResponse_condition) {
      String created = "Some String";
      HttpResponse createdResponse = new HttpResponse(created, HttpURLConnection.HTTP_CREATED);
      return createdResponse;
    }
    return null;
  }


  /**
   * 
   * getAchievementByID
   * 
   * @param id a JSONObject
   * 
   * @return HttpResponse
   * 
   */
  @GET
  @Path("/{id}")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.APPLICATION_JSON)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_NOT_FOUND, message = "notFoundResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "intErrorResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "okResponse")
  })
  @ApiOperation(value = "getAchievementByID", notes = "")
  public HttpResponse getAchievementByID(@ContentParam String id) {
    JSONObject id_JSON = (JSONObject) JSONValue.parse(id);
    // notFoundResponse
    boolean notFoundResponse_condition = true;
    if(notFoundResponse_condition) {
      String notFound = "Some String";
      HttpResponse notFoundResponse = new HttpResponse(notFound, HttpURLConnection.HTTP_NOT_FOUND);
      return notFoundResponse;
    }
    // intErrorResponse
    boolean intErrorResponse_condition = true;
    if(intErrorResponse_condition) {
      String intError = "Some String";
      HttpResponse intErrorResponse = new HttpResponse(intError, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return intErrorResponse;
    }
    // okResponse
    boolean okResponse_condition = true;
    if(okResponse_condition) {
      JSONObject list = new JSONObject();
      HttpResponse okResponse = new HttpResponse(list.toJSONString(), HttpURLConnection.HTTP_OK);
      return okResponse;
    }
    return null;
  }


  /**
   * 
   * deleteAchievement
   * 
   * @param id a String
   * 
   * @return HttpResponse
   * 
   */
  @DELETE
  @Path("/{id}")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.TEXT_PLAIN)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_UNAUTHORIZED, message = "unauthorizedResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "deletedResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "intErrorResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_NOT_FOUND, message = "notFoundResponse")
  })
  @ApiOperation(value = "deleteAchievement", notes = "")
  public HttpResponse deleteAchievement(@PathParam("id") String id) {
    // unauthorizedResponse
    boolean unauthorizedResponse_condition = true;
    if(unauthorizedResponse_condition) {
      String unauthorized = "Some String";
      HttpResponse unauthorizedResponse = new HttpResponse(unauthorized, HttpURLConnection.HTTP_UNAUTHORIZED);
      return unauthorizedResponse;
    }
    // deletedResponse
    boolean deletedResponse_condition = true;
    if(deletedResponse_condition) {
      JSONObject deleted = new JSONObject();
      HttpResponse deletedResponse = new HttpResponse(deleted.toJSONString(), HttpURLConnection.HTTP_OK);
      return deletedResponse;
    }
    // intErrorResponse
    boolean intErrorResponse_condition = true;
    if(intErrorResponse_condition) {
      String intError = "Some String";
      HttpResponse intErrorResponse = new HttpResponse(intError, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return intErrorResponse;
    }
    // notFoundResponse
    boolean notFoundResponse_condition = true;
    if(notFoundResponse_condition) {
      String notFound = "Some String";
      HttpResponse notFoundResponse = new HttpResponse(notFound, HttpURLConnection.HTTP_NOT_FOUND);
      return notFoundResponse;
    }
    return null;
  }


  // //////////////////////////////////////////////////////////////////////////////////////
  // Methods required by the LAS2peer framework.
  // //////////////////////////////////////////////////////////////////////////////////////

  
  /**
   * 
   * This method is needed for every RESTful application in LAS2peer. Please don't change.
   * 
   * @return the mapping
   * 
   */
  public String getRESTMapping() {
    String result = "";
    try {
      result = RESTMapper.getMethodsAsXML(this.getClass());
    } catch (Exception e) {
      e.printStackTrace();
    }
    return result;
  }


  /**
   * 
   * Returns the API documentation of all annotated resources for purposes of Swagger documentation.
   * 
   * @return The resource's documentation
   * 
   */
  @GET
  @Path("/swagger.json")
  @Produces(MediaType.APPLICATION_JSON)
  public HttpResponse getSwaggerJSON() {
    Swagger swagger = new Reader(new Swagger()).read(this.getClass());
    if (swagger == null) {
      return new HttpResponse("Swagger API declaration not available!",
          HttpURLConnection.HTTP_NOT_FOUND);
    }
    try {
      return new HttpResponse(Json.mapper().writeValueAsString(swagger), HttpURLConnection.HTTP_OK);
    } catch (JsonProcessingException e) {
      e.printStackTrace();
      return new HttpResponse(e.getMessage(), HttpURLConnection.HTTP_INTERNAL_ERROR);
    }
  }

}
