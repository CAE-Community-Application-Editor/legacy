package i5.las2peer.services.achievementResource;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import i5.las2peer.p2p.LocalNode;
import i5.las2peer.restMapper.MediaType;
import i5.las2peer.restMapper.RESTMapper;
import i5.las2peer.restMapper.data.Pair;
import i5.las2peer.restMapper.tools.ValidationResult;
import i5.las2peer.restMapper.tools.XMLCheck;
import i5.las2peer.security.ServiceAgent;
import i5.las2peer.security.UserAgent;
import i5.las2peer.testing.MockAgentFactory;
import i5.las2peer.webConnector.WebConnector;
import i5.las2peer.webConnector.client.ClientResponse;
import i5.las2peer.webConnector.client.MiniClient;
import net.minidev.json.JSONObject;


/**
 * 
 * UGNM1516G2 backend achievement - Test Class
 * 
 * This class provides a basic testing framework for the microservice UGNM1516G2 backend achievement. It was
 * generated by the CAE (Community Application Framework).
 *
 */
public class achievementResourceTest {

  private static final String HTTP_ADDRESS = "http://127.0.0.1";
  private static final int HTTP_PORT = WebConnector.DEFAULT_HTTP_PORT;

  private static LocalNode node;
  private static WebConnector connector;
  private static ByteArrayOutputStream logStream;

  private static UserAgent testAgent;
  private static final String testPass = "adamspass";

  private static final String testTemplateService = achievementResource.class.getCanonicalName();

  private static final String mainPath = "achievements";


  /**
   * 
   * Called before the tests start.
   * 
   * Sets up the node and initializes connector and users that can be used throughout the tests.
   * 
   * @throws Exception
   * 
   */
  @BeforeClass
  public static void startServer() throws Exception {

    // start node
    node = LocalNode.newNode();
    node.storeAgent(MockAgentFactory.getAdam());
    node.launch();

    ServiceAgent testService = ServiceAgent.generateNewAgent(testTemplateService, "a pass");
    testService.unlockPrivateKey("a pass");

    node.registerReceiver(testService);

    // start connector
    logStream = new ByteArrayOutputStream();

    connector = new WebConnector(true, HTTP_PORT, false, 1000);
    connector.setLogStream(new PrintStream(logStream));
    connector.start(node);
    Thread.sleep(1000); // wait a second for the connector to become ready
    testAgent = MockAgentFactory.getAdam();

    connector.updateServiceList();
    // avoid timing errors: wait for the repository manager to get all services before continuing
    try {
      System.out.println("waiting..");
      Thread.sleep(10000);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }

  }


  /**
   * 
   * Test for the createAchievement method.
   * 
   */
  @Test
  public void testcreateAchievement() {
    MiniClient c = new MiniClient();
    c.setAddressPort(HTTP_ADDRESS, HTTP_PORT);
    try {
      String appid = "initialized";
      JSONObject data = new JSONObject();
      c.setLogin(Long.toString(testAgent.getId()), testPass);
      @SuppressWarnings("unchecked")
      ClientResponse result = c.sendRequest("POST", mainPath + "/app/" + appid + "/all", data.toJSONString(),
        MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, new Pair[] {});
      assertTrue(true); // change here
      System.out.println("Result of 'testcreateAchievement': " + result.getResponse().trim());
    } catch (Exception e) {
      e.printStackTrace();
      fail("Exception: " + e);
    }
  }


  /**
   * 
   * Test for the getWins method.
   * 
   */
  @Test
  public void testgetWins() {
    MiniClient c = new MiniClient();
    c.setAddressPort(HTTP_ADDRESS, HTTP_PORT);
    try {
      String userid = "initialized";
      String appid = "initialized";
      c.setLogin(Long.toString(testAgent.getId()), testPass);
      @SuppressWarnings("unchecked")
      ClientResponse result = c.sendRequest("GET", mainPath + "/app/" + appid + "/user/" + userid + "/all", "",
        MediaType.TEXT_PLAIN, MediaType.APPLICATION_JSON, new Pair[] {});
      assertTrue(true); // change here
      System.out.println("Result of 'testgetWins': " + result.getResponse().trim());
    } catch (Exception e) {
      e.printStackTrace();
      fail("Exception: " + e);
    }
  }


  /**
   * 
   * Test for the getAllAchievementsByApp method.
   * 
   */
  @Test
  public void testgetAllAchievementsByApp() {
    MiniClient c = new MiniClient();
    c.setAddressPort(HTTP_ADDRESS, HTTP_PORT);
    try {
      String  = "initialized";
      c.setLogin(Long.toString(testAgent.getId()), testPass);
      @SuppressWarnings("unchecked")
      ClientResponse result = c.sendRequest("GET", mainPath + "/app/{appid}/all", "",
        MediaType.TEXT_PLAIN, MediaType.APPLICATION_JSON, new Pair[] " +  + ");
      assertTrue(true); // change here
      System.out.println("Result of 'testgetAllAchievementsByApp': " + result.getResponse().trim());
    } catch (Exception e) {
      e.printStackTrace();
      fail("Exception: " + e);
    }
  }


  /**
   * 
   * Test for the updateAchievement method.
   * 
   */
  @Test
  public void testupdateAchievement() {
    MiniClient c = new MiniClient();
    c.setAddressPort(HTTP_ADDRESS, HTTP_PORT);
    try {
      String id = "initialized";
      JSONObject newData = new JSONObject();
      c.setLogin(Long.toString(testAgent.getId()), testPass);
      @SuppressWarnings("unchecked")
      ClientResponse result = c.sendRequest("PUT", mainPath + "/" + id + "", newData.toJSONString(),
        MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, new Pair[] {});
      assertTrue(true); // change here
      System.out.println("Result of 'testupdateAchievement': " + result.getResponse().trim());
    } catch (Exception e) {
      e.printStackTrace();
      fail("Exception: " + e);
    }
  }


  /**
   * 
   * Test for the getAllNotAchieved method.
   * 
   */
  @Test
  public void testgetAllNotAchieved() {
    MiniClient c = new MiniClient();
    c.setAddressPort(HTTP_ADDRESS, HTTP_PORT);
    try {
      String appid = "initialized";
      String userid = "initialized";
      c.setLogin(Long.toString(testAgent.getId()), testPass);
      @SuppressWarnings("unchecked")
      ClientResponse result = c.sendRequest("GET", mainPath + "/app/" + appid + "/notachieved/" + userid + "", "",
        MediaType.TEXT_PLAIN, MediaType.APPLICATION_JSON, new Pair[] {});
      assertTrue(true); // change here
      System.out.println("Result of 'testgetAllNotAchieved': " + result.getResponse().trim());
    } catch (Exception e) {
      e.printStackTrace();
      fail("Exception: " + e);
    }
  }


  /**
   * 
   * Test for the addWin method.
   * 
   */
  @Test
  public void testaddWin() {
    MiniClient c = new MiniClient();
    c.setAddressPort(HTTP_ADDRESS, HTTP_PORT);
    try {
      JSONObject userid = new JSONObject();
      String appid = "initialized";
      c.setLogin(Long.toString(testAgent.getId()), testPass);
      @SuppressWarnings("unchecked")
      ClientResponse result = c.sendRequest("POST", mainPath + "/app/" + appid + "/user/{userid}/all", userid.toJSONString(),
        MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN, new Pair[] {});
      assertTrue(true); // change here
      System.out.println("Result of 'testaddWin': " + result.getResponse().trim());
    } catch (Exception e) {
      e.printStackTrace();
      fail("Exception: " + e);
    }
  }


  /**
   * 
   * Test for the getAchievementByID method.
   * 
   */
  @Test
  public void testgetAchievementByID() {
    MiniClient c = new MiniClient();
    c.setAddressPort(HTTP_ADDRESS, HTTP_PORT);
    try {
      JSONObject id = new JSONObject();
      c.setLogin(Long.toString(testAgent.getId()), testPass);
      @SuppressWarnings("unchecked")
      ClientResponse result = c.sendRequest("GET", mainPath + "/{id}", id.toJSONString(),
        MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, new Pair[] {});
      assertTrue(true); // change here
      System.out.println("Result of 'testgetAchievementByID': " + result.getResponse().trim());
    } catch (Exception e) {
      e.printStackTrace();
      fail("Exception: " + e);
    }
  }


  /**
   * 
   * Test for the deleteAchievement method.
   * 
   */
  @Test
  public void testdeleteAchievement() {
    MiniClient c = new MiniClient();
    c.setAddressPort(HTTP_ADDRESS, HTTP_PORT);
    try {
      String id = "initialized";
      c.setLogin(Long.toString(testAgent.getId()), testPass);
      @SuppressWarnings("unchecked")
      ClientResponse result = c.sendRequest("DELETE", mainPath + "/" + id + "", "",
        MediaType.TEXT_PLAIN, MediaType.APPLICATION_JSON, new Pair[] {});
      assertTrue(true); // change here
      System.out.println("Result of 'testdeleteAchievement': " + result.getResponse().trim());
    } catch (Exception e) {
      e.printStackTrace();
      fail("Exception: " + e);
    }
  }


  /**
   * 
   * Test the UGNM1516G2 backend achievement for valid rest mapping. Important for development.
   * 
   */
  @Test
  public void testDebugMapping() {
    achievementResource cl = new achievementResource();
    String XML_LOCATION = "./restMapping.xml";
    String xml = cl.getRESTMapping();
  
    try {
      RESTMapper.writeFile(XML_LOCATION, xml);
    } catch (IOException e) {
      e.printStackTrace();
    }
    XMLCheck validator = new XMLCheck();
    ValidationResult result = validator.validate(xml);
    if (!result.isValid()) {
      fail();
    }
  }


  /**
   * 
   * Called after the tests have finished. Shuts down the server and prints out the connector log
   * file for reference.
   * 
   * @throws Exception
   * 
   */
  @AfterClass
  public static void shutDownServer() throws Exception {

    connector.stop();
    node.shutDown();

    connector = null;
    node = null;

    LocalNode.reset();

    System.out.println("Connector-Log:");
    System.out.println("--------------");

    System.out.println(logStream.toString());

  }

}
