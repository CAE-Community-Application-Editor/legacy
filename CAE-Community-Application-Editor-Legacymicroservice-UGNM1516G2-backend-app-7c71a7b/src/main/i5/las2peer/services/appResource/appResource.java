package i5.las2peer.services.appResource;

import java.io.Serializable;
import java.net.HttpURLConnection;

import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;

import com.fasterxml.jackson.core.JsonProcessingException;

import i5.las2peer.api.Service;
import i5.las2peer.restMapper.HttpResponse;
import i5.las2peer.restMapper.MediaType;
import i5.las2peer.restMapper.RESTMapper;
import i5.las2peer.restMapper.annotations.ContentParam;
import i5.las2peer.restMapper.annotations.Version;
import i5.las2peer.services.appResource.database.DatabaseManager;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Contact;
import io.swagger.annotations.Info;
import io.swagger.annotations.License;
import io.swagger.annotations.SwaggerDefinition;
import io.swagger.jaxrs.Reader;
import io.swagger.models.Swagger;
import io.swagger.util.Json;
import net.minidev.json.JSONObject;
import net.minidev.json.JSONValue;


/**
 * 
 * UGNM1516G2 backend app
 * 
 * This microservice was generated by the CAE (Community Application Editor). If you edit it, please
 * make sure to keep the general structure of the file and only add the body of the methods provided
 * in this main file. Private methods are also allowed, but any "deeper" functionality should be
 * outsourced to (imported) classes.
 * 
 */
@Path("app")
@Version("0.3") // this annotation is used by the XML mapper
@Api
@SwaggerDefinition(
    info = @Info(title = "UGNM1516G2 backend app", version = "0.3",
        description = "A LAS2peer microservice generated by the CAE.",
        termsOfService = "none",
        contact = @Contact(name = "sebastian vaassen", email = "CAEAddress@gmail.com") ,
        license = @License(name = "BSD",
            url = "https://github.com/CAE-Community-Application-Editor/microservice-UGNM1516G2-backend-app/blob/master/LICENSE.txt") ) )
public class appResource extends Service {


  /*
   * Database configuration
   */
  private String jdbcDriverClassName;
  private String jdbcLogin;
  private String jdbcPass;
  private String jdbcUrl;
  private String jdbcSchema;
  private DatabaseManager dbm;


  public appResource() {
    // read and set properties values
    setFieldValues();
    // instantiate a database manager to handle database connection pooling and credentials
    dbm = new DatabaseManager(jdbcDriverClassName, jdbcLogin, jdbcPass, jdbcUrl, jdbcSchema);
  }

  // //////////////////////////////////////////////////////////////////////////////////////
  // Service methods.
  // //////////////////////////////////////////////////////////////////////////////////////


  /**
   * 
   * getAllManagedApps
   * 
   * 
   * @return HttpResponse
   * 
   */
  @GET
  @Path("/users/me/manages")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.TEXT_PLAIN)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "intErrorResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_NOT_FOUND, message = "notFoundResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "okresponse")
  })
  @ApiOperation(value = "getAllManagedApps", notes = "")
  public HttpResponse getAllManagedApps() {
    // intErrorResponse
    boolean intErrorResponse_condition = true;
    if(intErrorResponse_condition) {
      String intError = "Some String";
      HttpResponse intErrorResponse = new HttpResponse(intError, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return intErrorResponse;
    }
    // notFoundResponse
    boolean notFoundResponse_condition = true;
    if(notFoundResponse_condition) {
      String notFound = "Some String";
      HttpResponse notFoundResponse = new HttpResponse(notFound, HttpURLConnection.HTTP_NOT_FOUND);
      return notFoundResponse;
    }
    // okresponse
    boolean okresponse_condition = true;
    if(okresponse_condition) {
      JSONObject list = new JSONObject();
      HttpResponse okresponse = new HttpResponse(list.toJSONString(), HttpURLConnection.HTTP_OK);
      return okresponse;
    }
    return null;
  }


  /**
   * 
   * addUsageOfApp
   * 
   * @param id a String
   * 
   * @return HttpResponse
   * 
   */
  @POST
  @Path("/user/me/{id}")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.TEXT_PLAIN)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_NOT_FOUND, message = "notFoundResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "intErrorResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_CREATED, message = "createdResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_CONFLICT, message = "conflictResponse")
  })
  @ApiOperation(value = "addUsageOfApp", notes = "")
  public HttpResponse addUsageOfApp(@PathParam("id") String id) {
    // notFoundResponse
    boolean notFoundResponse_condition = true;
    if(notFoundResponse_condition) {
      String notFound = "Some String";
      HttpResponse notFoundResponse = new HttpResponse(notFound, HttpURLConnection.HTTP_NOT_FOUND);
      return notFoundResponse;
    }
    // intErrorResponse
    boolean intErrorResponse_condition = true;
    if(intErrorResponse_condition) {
      String intError = "Some String";
      HttpResponse intErrorResponse = new HttpResponse(intError, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return intErrorResponse;
    }
    // createdResponse
    boolean createdResponse_condition = true;
    if(createdResponse_condition) {
      JSONObject created = new JSONObject();
      HttpResponse createdResponse = new HttpResponse(created.toJSONString(), HttpURLConnection.HTTP_CREATED);
      return createdResponse;
    }
    // conflictResponse
    boolean conflictResponse_condition = true;
    if(conflictResponse_condition) {
      String conflict = "Some String";
      HttpResponse conflictResponse = new HttpResponse(conflict, HttpURLConnection.HTTP_CONFLICT);
      return conflictResponse;
    }
    return null;
  }


  /**
   * 
   * getAppListByUserID
   * 
   * @param userid a String
   * 
   * @return HttpResponse
   * 
   */
  @GET
  @Path("/user/{userid}/all")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.TEXT_PLAIN)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "intErrorResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "okResponse")
  })
  @ApiOperation(value = "getAppListByUserID", notes = "")
  public HttpResponse getAppListByUserID(@PathParam("userid") String userid) {
    // intErrorResponse
    boolean intErrorResponse_condition = true;
    if(intErrorResponse_condition) {
      String intError = "Some String";
      HttpResponse intErrorResponse = new HttpResponse(intError, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return intErrorResponse;
    }
    // okResponse
    boolean okResponse_condition = true;
    if(okResponse_condition) {
      JSONObject AppList = new JSONObject();
      HttpResponse okResponse = new HttpResponse(AppList.toJSONString(), HttpURLConnection.HTTP_OK);
      return okResponse;
    }
    return null;
  }


  /**
   * 
   * addAdmin
   * 
   * @param userid a String
   * @param id a String
   * 
   * @return HttpResponse
   * 
   */
  @POST
  @Path("/{id}/admin/{userid}")
  @Produces(MediaType.TEXT_PLAIN)
  @Consumes(MediaType.TEXT_PLAIN)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_BAD_REQUEST, message = "badRequestRersponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_UNAUTHORIZED, message = "unauthorizedResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_NOT_FOUND, message = "notFoundResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "intErrorResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_CREATED, message = "createdresponse")
  })
  @ApiOperation(value = "addAdmin", notes = "")
  public HttpResponse addAdmin(@PathParam("userid") String userid, @PathParam("id") String id) {
    // badRequestRersponse
    boolean badRequestRersponse_condition = true;
    if(badRequestRersponse_condition) {
      String badRequest = "Some String";
      HttpResponse badRequestRersponse = new HttpResponse(badRequest, HttpURLConnection.HTTP_BAD_REQUEST);
      return badRequestRersponse;
    }
    // unauthorizedResponse
    boolean unauthorizedResponse_condition = true;
    if(unauthorizedResponse_condition) {
      String unauthorized = "Some String";
      HttpResponse unauthorizedResponse = new HttpResponse(unauthorized, HttpURLConnection.HTTP_UNAUTHORIZED);
      return unauthorizedResponse;
    }
    // notFoundResponse
    boolean notFoundResponse_condition = true;
    if(notFoundResponse_condition) {
      String notFound = "Some String";
      HttpResponse notFoundResponse = new HttpResponse(notFound, HttpURLConnection.HTTP_NOT_FOUND);
      return notFoundResponse;
    }
    // intErrorResponse
    boolean intErrorResponse_condition = true;
    if(intErrorResponse_condition) {
      String intError = "Some String";
      HttpResponse intErrorResponse = new HttpResponse(intError, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return intErrorResponse;
    }
    // createdresponse
    boolean createdresponse_condition = true;
    if(createdresponse_condition) {
      String created = "Some String";
      HttpResponse createdresponse = new HttpResponse(created, HttpURLConnection.HTTP_CREATED);
      return createdresponse;
    }
    return null;
  }


  /**
   * 
   * getAppList
   * 
   * 
   * @return HttpResponse
   * 
   */
  @GET
  @Path("/all")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.TEXT_PLAIN)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "okResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "intErrorResponse")
  })
  @ApiOperation(value = "getAppList", notes = "")
  public HttpResponse getAppList() {
    // okResponse
    boolean okResponse_condition = true;
    if(okResponse_condition) {
      JSONObject appList = new JSONObject();
      HttpResponse okResponse = new HttpResponse(appList.toJSONString(), HttpURLConnection.HTTP_OK);
      return okResponse;
    }
    // intErrorResponse
    boolean intErrorResponse_condition = true;
    if(intErrorResponse_condition) {
      JSONObject intError = new JSONObject();
      HttpResponse intErrorResponse = new HttpResponse(intError.toJSONString(), HttpURLConnection.HTTP_INTERNAL_ERROR);
      return intErrorResponse;
    }
    return null;
  }


  /**
   * 
   * createApp
   * 
   * @param name a JSONObject
   * 
   * @return HttpResponse
   * 
   */
  @POST
  @Path("/all")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.APPLICATION_JSON)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "intErrorResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_CREATED, message = "createdResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_BAD_REQUEST, message = "badRequestResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_CONFLICT, message = "conflictRsesponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_UNAUTHORIZED, message = "unauthorizedResponse")
  })
  @ApiOperation(value = "createApp", notes = "")
  public HttpResponse createApp(@ContentParam String name) {
    JSONObject name_JSON = (JSONObject) JSONValue.parse(name);
    // intErrorResponse
    boolean intErrorResponse_condition = true;
    if(intErrorResponse_condition) {
      String intError = "Some String";
      HttpResponse intErrorResponse = new HttpResponse(intError, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return intErrorResponse;
    }
    // createdResponse
    boolean createdResponse_condition = true;
    if(createdResponse_condition) {
      JSONObject createdApp = new JSONObject();
      HttpResponse createdResponse = new HttpResponse(createdApp.toJSONString(), HttpURLConnection.HTTP_CREATED);
      return createdResponse;
    }
    // badRequestResponse
    boolean badRequestResponse_condition = true;
    if(badRequestResponse_condition) {
      String badRequest = "Some String";
      HttpResponse badRequestResponse = new HttpResponse(badRequest, HttpURLConnection.HTTP_BAD_REQUEST);
      return badRequestResponse;
    }
    // conflictRsesponse
    boolean conflictRsesponse_condition = true;
    if(conflictRsesponse_condition) {
      String conflict = "Some String";
      HttpResponse conflictRsesponse = new HttpResponse(conflict, HttpURLConnection.HTTP_CONFLICT);
      return conflictRsesponse;
    }
    // unauthorizedResponse
    boolean unauthorizedResponse_condition = true;
    if(unauthorizedResponse_condition) {
      String unauthorized = "Some String";
      HttpResponse unauthorizedResponse = new HttpResponse(unauthorized, HttpURLConnection.HTTP_UNAUTHORIZED);
      return unauthorizedResponse;
    }
    return null;
  }


  /**
   * 
   * updateApp
   * 
   * @param id a String
   * @param name a JSONObject
   * 
   * @return HttpResponse
   * 
   */
  @PUT
  @Path("/{id}")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.APPLICATION_JSON)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "okResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "intErrorResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_BAD_REQUEST, message = "badRequestResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_UNAUTHORIZED, message = "unauthorizedResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_NOT_FOUND, message = "notFoundResponse")
  })
  @ApiOperation(value = "updateApp", notes = "")
  public HttpResponse updateApp(@PathParam("id") String id, @ContentParam String name) {
    JSONObject name_JSON = (JSONObject) JSONValue.parse(name);
    // okResponse
    boolean okResponse_condition = true;
    if(okResponse_condition) {
      JSONObject updatedAppData = new JSONObject();
      HttpResponse okResponse = new HttpResponse(updatedAppData.toJSONString(), HttpURLConnection.HTTP_OK);
      return okResponse;
    }
    // intErrorResponse
    boolean intErrorResponse_condition = true;
    if(intErrorResponse_condition) {
      String intError = "Some String";
      HttpResponse intErrorResponse = new HttpResponse(intError, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return intErrorResponse;
    }
    // badRequestResponse
    boolean badRequestResponse_condition = true;
    if(badRequestResponse_condition) {
      String badrequest = "Some String";
      HttpResponse badRequestResponse = new HttpResponse(badrequest, HttpURLConnection.HTTP_BAD_REQUEST);
      return badRequestResponse;
    }
    // unauthorizedResponse
    boolean unauthorizedResponse_condition = true;
    if(unauthorizedResponse_condition) {
      String unauthorized = "Some String";
      HttpResponse unauthorizedResponse = new HttpResponse(unauthorized, HttpURLConnection.HTTP_UNAUTHORIZED);
      return unauthorizedResponse;
    }
    // notFoundResponse
    boolean notFoundResponse_condition = true;
    if(notFoundResponse_condition) {
      String notFound = "Some String";
      HttpResponse notFoundResponse = new HttpResponse(notFound, HttpURLConnection.HTTP_NOT_FOUND);
      return notFoundResponse;
    }
    return null;
  }


  /**
   * 
   * incScore
   * 
   * @param userid a String
   * @param id a String
   * @param score a JSONObject
   * 
   * @return HttpResponse
   * 
   */
  @PUT
  @Path("/user/{userid}/{id}")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.APPLICATION_JSON)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_NOT_FOUND, message = "notFoundResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "okResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_UNAUTHORIZED, message = "unauthorizedResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "intErrorResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_BAD_REQUEST, message = "badRequestResponse")
  })
  @ApiOperation(value = "incScore", notes = "")
  public HttpResponse incScore(@PathParam("userid") String userid, @PathParam("id") String id, @ContentParam String score) {
    JSONObject score_JSON = (JSONObject) JSONValue.parse(score);
    // notFoundResponse
    boolean notFoundResponse_condition = true;
    if(notFoundResponse_condition) {
      String notFound = "Some String";
      HttpResponse notFoundResponse = new HttpResponse(notFound, HttpURLConnection.HTTP_NOT_FOUND);
      return notFoundResponse;
    }
    // okResponse
    boolean okResponse_condition = true;
    if(okResponse_condition) {
      JSONObject newscore = new JSONObject();
      HttpResponse okResponse = new HttpResponse(newscore.toJSONString(), HttpURLConnection.HTTP_OK);
      return okResponse;
    }
    // unauthorizedResponse
    boolean unauthorizedResponse_condition = true;
    if(unauthorizedResponse_condition) {
      JSONObject unauthorized = new JSONObject();
      HttpResponse unauthorizedResponse = new HttpResponse(unauthorized.toJSONString(), HttpURLConnection.HTTP_UNAUTHORIZED);
      return unauthorizedResponse;
    }
    // intErrorResponse
    boolean intErrorResponse_condition = true;
    if(intErrorResponse_condition) {
      String intError = "Some String";
      HttpResponse intErrorResponse = new HttpResponse(intError, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return intErrorResponse;
    }
    // badRequestResponse
    boolean badRequestResponse_condition = true;
    if(badRequestResponse_condition) {
      String badRequest = "Some String";
      HttpResponse badRequestResponse = new HttpResponse(badRequest, HttpURLConnection.HTTP_BAD_REQUEST);
      return badRequestResponse;
    }
    return null;
  }


  /**
   * 
   * deleteApp
   * 
   * @param id a String
   * 
   * @return HttpResponse
   * 
   */
  @DELETE
  @Path("/{id}")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.TEXT_PLAIN)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "deleteResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "intErrorResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_NOT_FOUND, message = "notFoundResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_UNAUTHORIZED, message = "unauthorizedResponse")
  })
  @ApiOperation(value = "deleteApp", notes = "")
  public HttpResponse deleteApp(@PathParam("id") String id) {
    Serializable id = null;
    try {
      Object isDeleted = this.invokeServiceMethod(
          "achievementResource", "deleteAchievements",
          id);
    } catch (Exception e) {
        e.printStackTrace();
    }
    // deleteResponse
    boolean deleteResponse_condition = true;
    if(deleteResponse_condition) {
      JSONObject deletedApp = new JSONObject();
      HttpResponse deleteResponse = new HttpResponse(deletedApp.toJSONString(), HttpURLConnection.HTTP_OK);
      return deleteResponse;
    }
    // intErrorResponse
    boolean intErrorResponse_condition = true;
    if(intErrorResponse_condition) {
      String intError = "Some String";
      HttpResponse intErrorResponse = new HttpResponse(intError, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return intErrorResponse;
    }
    // notFoundResponse
    boolean notFoundResponse_condition = true;
    if(notFoundResponse_condition) {
      String notFound = "Some String";
      HttpResponse notFoundResponse = new HttpResponse(notFound, HttpURLConnection.HTTP_NOT_FOUND);
      return notFoundResponse;
    }
    // unauthorizedResponse
    boolean unauthorizedResponse_condition = true;
    if(unauthorizedResponse_condition) {
      String unauthorized = "Some String";
      HttpResponse unauthorizedResponse = new HttpResponse(unauthorized, HttpURLConnection.HTTP_UNAUTHORIZED);
      return unauthorizedResponse;
    }
    return null;
  }


  /**
   * 
   * getAppByID
   * 
   * @param id a String
   * 
   * @return HttpResponse
   * 
   */
  @GET
  @Path("/{id}")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.TEXT_PLAIN)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_NOT_FOUND, message = "notFoundResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "okResponse"),
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "intErrorResponse")
  })
  @ApiOperation(value = "getAppByID", notes = "")
  public HttpResponse getAppByID(@PathParam("id") String id) {
    // notFoundResponse
    boolean notFoundResponse_condition = true;
    if(notFoundResponse_condition) {
      String notFound = "Some String";
      HttpResponse notFoundResponse = new HttpResponse(notFound, HttpURLConnection.HTTP_NOT_FOUND);
      return notFoundResponse;
    }
    // okResponse
    boolean okResponse_condition = true;
    if(okResponse_condition) {
      JSONObject appData = new JSONObject();
      HttpResponse okResponse = new HttpResponse(appData.toJSONString(), HttpURLConnection.HTTP_OK);
      return okResponse;
    }
    // intErrorResponse
    boolean intErrorResponse_condition = true;
    if(intErrorResponse_condition) {
      String intError = "Some String";
      HttpResponse intErrorResponse = new HttpResponse(intError, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return intErrorResponse;
    }
    return null;
  }


  // //////////////////////////////////////////////////////////////////////////////////////
  // Methods required by the LAS2peer framework.
  // //////////////////////////////////////////////////////////////////////////////////////

  
  /**
   * 
   * This method is needed for every RESTful application in LAS2peer. Please don't change.
   * 
   * @return the mapping
   * 
   */
  public String getRESTMapping() {
    String result = "";
    try {
      result = RESTMapper.getMethodsAsXML(this.getClass());
    } catch (Exception e) {
      e.printStackTrace();
    }
    return result;
  }


  /**
   * 
   * Returns the API documentation of all annotated resources for purposes of Swagger documentation.
   * 
   * @return The resource's documentation
   * 
   */
  @GET
  @Path("/swagger.json")
  @Produces(MediaType.APPLICATION_JSON)
  public HttpResponse getSwaggerJSON() {
    Swagger swagger = new Reader(new Swagger()).read(this.getClass());
    if (swagger == null) {
      return new HttpResponse("Swagger API declaration not available!",
          HttpURLConnection.HTTP_NOT_FOUND);
    }
    try {
      return new HttpResponse(Json.mapper().writeValueAsString(swagger), HttpURLConnection.HTTP_OK);
    } catch (JsonProcessingException e) {
      e.printStackTrace();
      return new HttpResponse(e.getMessage(), HttpURLConnection.HTTP_INTERNAL_ERROR);
    }
  }

}
